// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  passwordHash      String    @map("password_hash")
  name              String
  avatarUrl         String?   @map("avatar_url")
  timezone          String    @default("UTC")
  preferredCurrency String    @default("USD") @map("preferred_currency")
  emailVerified     Boolean   @default(false) @map("email_verified")
  emailVerifiedAt   DateTime? @map("email_verified_at")
  lastLoginAt       DateTime? @map("last_login_at")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  // 關聯
  sessions            UserSession[]
  preferences         UserPreference[]
  capitalAllocations  CapitalAllocation[]
  transactions        Transaction[]
  holdings            Holding[]
  riskSettings        RiskSetting[]
  riskEvents          RiskEvent[]

  @@map("users")
}

model UserSession {
  id             String   @id @default(cuid())
  userId         String   @map("user_id")
  sessionToken   String   @unique @map("session_token")
  expiresAt      DateTime @map("expires_at")
  createdAt      DateTime @default(now()) @map("created_at")
  lastAccessedAt DateTime @default(now()) @map("last_accessed_at")
  ipAddress      String?  @map("ip_address")
  userAgent      String?  @map("user_agent")

  // 關聯
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([sessionToken])
  @@index([userId])
  @@index([expiresAt])
  @@map("user_sessions")
}

model UserPreference {
  id              String   @id @default(cuid())
  userId          String   @map("user_id")
  preferenceKey   String   @map("preference_key")
  preferenceValue Json     @map("preference_value")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // 關聯
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, preferenceKey])
  @@index([userId, preferenceKey])
  @@map("user_preferences")
}

model CapitalAllocation {
  id              String   @id @default(cuid())
  userId          String   @map("user_id")
  name            String
  description     String?
  totalAmount     Decimal  @map("total_amount") @db.Decimal(15, 2)
  availableAmount Decimal  @map("available_amount") @db.Decimal(15, 2)
  currency        String
  riskLevel       String   @default("moderate") @map("risk_level")
  isActive        Boolean  @default(true) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // 關聯
  user         User                        @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  holdings     Holding[]
  riskSettings RiskSetting[]
  history      CapitalAllocationHistory[]

  @@index([userId])
  @@index([userId, isActive])
  @@map("capital_allocations")
}

model CapitalAllocationHistory {
  id                String            @id @default(cuid())
  allocationId      String            @map("allocation_id")
  actionType        String            @map("action_type")
  amount            Decimal           @db.Decimal(15, 2)
  previousAvailable Decimal           @map("previous_available") @db.Decimal(15, 2)
  newAvailable      Decimal           @map("new_available") @db.Decimal(15, 2)
  description       String?
  createdAt         DateTime          @default(now()) @map("created_at")

  // 關聯
  allocation CapitalAllocation @relation(fields: [allocationId], references: [id], onDelete: Cascade)

  @@index([allocationId])
  @@index([allocationId, createdAt])
  @@map("capital_allocation_history")
}

model Transaction {
  id                    String    @id @default(cuid())
  userId                String    @map("user_id")
  allocationId          String    @map("allocation_id")
  market                String
  symbol                String
  stockName             String?   @map("stock_name")
  transactionType       String    @map("transaction_type")
  shares                Int
  price                 Decimal   @db.Decimal(10, 4)
  totalAmount           Decimal   @map("total_amount") @db.Decimal(15, 2)
  fee                   Decimal   @default(0) @db.Decimal(10, 2)
  feeCurrency           String    @default("USD") @map("fee_currency")
  currency              String
  exchangeRate          Decimal   @default(1.0) @map("exchange_rate") @db.Decimal(10, 6)
  baseCurrencyAmount    Decimal?  @map("base_currency_amount") @db.Decimal(15, 2)
  transactionDate       DateTime  @map("transaction_date") @db.Date
  settlementDate        DateTime? @map("settlement_date") @db.Date
  notes                 String?
  externalTransactionId String?   @map("external_transaction_id")
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")

  // 關聯
  user       User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  allocation CapitalAllocation @relation(fields: [allocationId], references: [id], onDelete: Restrict)

  @@index([userId])
  @@index([allocationId])
  @@index([market, symbol])
  @@index([userId, transactionDate])
  @@index([userId, market, symbol, transactionDate])
  @@map("transactions")
}

model Holding {
  id                  String            @id @default(cuid())
  userId              String            @map("user_id")
  allocationId        String            @map("allocation_id")
  market              String
  symbol              String
  stockName           String?           @map("stock_name")
  totalShares         Int               @map("total_shares")
  averageCost         Decimal           @map("average_cost") @db.Decimal(10, 4)
  totalCost           Decimal           @map("total_cost") @db.Decimal(15, 2)
  currency            String
  firstPurchaseDate   DateTime          @map("first_purchase_date") @db.Date
  lastTransactionDate DateTime          @map("last_transaction_date") @db.Date
  updatedAt           DateTime          @updatedAt @map("updated_at")

  // 關聯
  user       User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  allocation CapitalAllocation @relation(fields: [allocationId], references: [id], onDelete: Cascade)

  @@unique([userId, allocationId, market, symbol])
  @@index([userId, allocationId])
  @@index([market, symbol])
  @@index([updatedAt])
  @@map("holdings")
}

model RiskSetting {
  id                  String            @id @default(cuid())
  userId              String            @map("user_id")
  allocationId        String?           @map("allocation_id")
  settingType         String            @map("setting_type")
  settingScope        String            @default("allocation") @map("setting_scope")
  targetSymbol        String?           @map("target_symbol")
  targetMarket        String?           @map("target_market")
  maxLossPercentage   Decimal?          @map("max_loss_percentage") @db.Decimal(5, 2)
  stopLossPercentage  Decimal?          @map("stop_loss_percentage") @db.Decimal(5, 2)
  positionSizeLimit   Decimal?          @map("position_size_limit") @db.Decimal(5, 2)
  maxPositionValue    Decimal?          @map("max_position_value") @db.Decimal(15, 2)
  dailyLossLimit      Decimal?          @map("daily_loss_limit") @db.Decimal(15, 2)
  isActive            Boolean           @default(true) @map("is_active")
  createdAt           DateTime          @default(now()) @map("created_at")
  updatedAt           DateTime          @updatedAt @map("updated_at")

  // 關聯
  user       User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  allocation CapitalAllocation? @relation(fields: [allocationId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([allocationId])
  @@index([targetMarket, targetSymbol])
  @@index([userId, isActive])
  @@map("risk_settings")
}

model RiskEvent {
  id             String            @id @default(cuid())
  userId         String            @map("user_id")
  allocationId   String?           @map("allocation_id")
  eventType      String            @map("event_type")
  severity       String
  symbol         String?
  market         String?
  triggerValue   Decimal?          @map("trigger_value") @db.Decimal(15, 2)
  thresholdValue Decimal?          @map("threshold_value") @db.Decimal(15, 2)
  message        String
  isResolved     Boolean           @default(false) @map("is_resolved")
  resolvedAt     DateTime?         @map("resolved_at")
  createdAt      DateTime          @default(now()) @map("created_at")

  // 關聯
  user       User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  allocation CapitalAllocation? @relation(fields: [allocationId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([userId, isResolved])
  @@index([createdAt])
  @@map("risk_events")
}

